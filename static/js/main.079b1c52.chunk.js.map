{"version":3,"sources":["components/Loader.js","Yolo.js","App.js","serviceWorker.js","index.js"],"names":["Loader","Button","variant","disabled","Spinner","as","animation","size","role","aria-hidden","Yolo","videoRef","React","createRef","canvasRef","mystream","state","loading","model_loaded","styles","position","borderRadius","boxShadow","detectFromVideoFrame","model","video","predict","scoreThreshold","then","predictions","showDetections","requestAnimationFrame","error","console","log","ctx","current","getContext","clearRect","canvas","width","height","font","textBaseline","forEach","prediction","x","left","y","top","right","bottom","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","class","textHeight","parseInt","fillRect","fillText","score","toFixed","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","webcamPromise","audio","stream","window","srcObject","Promise","resolve","onloadedmetadata","loadlModelPromise","yolo","v3tiny","all","values","setState","catch","this","getTracks","track","stop","mode","dispose","v2tiny","v1tiny","v3","DropdownButton","id","title","Dropdown","Item","onClick","load","className","style","autoPlay","muted","ref","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.079b1c52.chunk.js","sourcesContent":["import React from 'react'\nimport Spinner from 'react-bootstrap/Spinner'\nimport Button from 'react-bootstrap/Button'\n\n\nexport default function Loader() {\n    return (\n        <div>\n              <Button variant=\"primary\" disabled>\n    <Spinner\n      as=\"span\"\n      animation=\"grow\"\n      size=\"sm\"\n      role=\"status\"\n      aria-hidden=\"true\"\n    />\n    Loading Model...\n  </Button>\n\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport yolo from 'tfjs-yolo'\nimport Loader from './components/Loader'\nimport {Button,Tabs,Tab,Dropdown,DropdownButton} from 'react-bootstrap'\nimport './styles/style.css';\n\n \n\n\n\nexport default class Yolo extends Component {\n\n    \n        videoRef = React.createRef();\n        canvasRef = React.createRef();\n        mystream = null\n        state={\n            loading:true,\n            model_loaded:true,\n        }\n\n\n    styles = {\n      position: 'fixed',\n      borderRadius: \"5px\",\n    boxShadow: \"0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)\",\n\n    };\n  \n  \n    detectFromVideoFrame = (model, video) => {\n      model.predict(video,{ scoreThreshold:0.2 }).then(predictions => {\n        this.showDetections(predictions);\n  \n        requestAnimationFrame(() => {\n          this.detectFromVideoFrame(model, video);\n        });\n      }, (error) => {\n        console.log(\"Couldn't start the webcam\")\n        console.error(error)\n      });\n    };\n  \n    showDetections = predictions => {\n      const ctx = this.canvasRef.current.getContext(\"2d\");\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      const font = \"24px helvetica\";\n      ctx.font = font;\n      ctx.textBaseline = \"top\";\n  \n      predictions.forEach(prediction => {\n          console.log(prediction);\n\n          \n\n\n        const x = prediction.left;\n        const y = prediction.top;\n        const width = prediction.right - prediction.left ;\n        const height = prediction.bottom - prediction.top;\n        // Draw the bounding box.\n        ctx.strokeStyle = \"#b86b77\";\n        ctx.lineWidth = 1;\n        ctx.strokeRect(x, y, width, height);\n        // Draw the label background.\n        ctx.fillStyle = \"#b86b77\";\n        const textWidth = ctx.measureText(prediction.class).width;\n        const textHeight = parseInt(font, 5);\n        // draw top left rectangle\n        ctx.fillRect(x, y, textWidth + 5, textHeight + 5);\n        // draw bottom left rectangle\n        ctx.fillRect(x, y + height - textHeight, textWidth + 5, textHeight + 5);\n  \n        // Draw the text last to ensure it's on top.\n        ctx.fillStyle = \"#000000\";\n        ctx.fillText(prediction.class, x, y);\n        ctx.fillText(prediction.score.toFixed(2), x, y + height - textHeight);\n      });\n    };\n  \n    componentDidMount() {\n      if (navigator.mediaDevices.getUserMedia || navigator.mediaDevices.webkitGetUserMedia) {\n        // define a Promise that'll be used to load the webcam and read its frames\n        const webcamPromise = navigator.mediaDevices\n          .getUserMedia({\n            video: true,\n            audio: false,\n          })\n          .then(stream => {\n            // pass the current frame to the window.stream\n            window.stream = stream;\n            // pass the stream to the videoRef\n            this.videoRef.current.srcObject = stream;\n\n            this.mystream = stream;\n  \n            return new Promise(resolve => {\n              this.videoRef.current.onloadedmetadata = () => {\n                resolve();\n              };\n            });\n          }, (error) => {\n            console.log(\"Couldn't start the webcam\")\n            console.error(error)\n          });\n  \n        // define a Promise that'll be used to load the model\n        // const loadlModelPromise = cocoSsd.load();\n\n\n        const loadlModelPromise =yolo.v3tiny()\n\n        \n        \n        // resolve all the Promises\n        Promise.all([loadlModelPromise, webcamPromise])\n          .then(values => {\n            this.setState({\n\n                model_loaded: true,\n                loading:false\n              });\n              this.model = values[0];\n            this.detectFromVideoFrame(values[0], this.videoRef.current);\n          })\n          .catch(error => {\n            console.error(error);\n          });\n      }\n    }\n\n    componentWillUnmount() {\n      if(this.mystream){\n        this.mystream.getTracks().forEach(track => track.stop());\n      }\n      \n      if(window.stream){\n        window.stream.getTracks().forEach(track => track.stop());\n\n      }\n     \n\n    }\n\n    async load(mode){\n        if(this.model){\n            this.model.dispose()\n        }\n        this.setState({\n          loading: true\n        });\n          if(mode === \"v3\"){\n            console.log(\"Tiny Yolo-v3 \")\n            this.model = await yolo.v3tiny();\n            this.setState({\n              loading: true\n            });\n\n          }\n          if(mode === \"v2\"){\n            console.log(\"Tiny Yolo-v2 \")\n            this.model = await yolo.v2tiny();\n            this.setState({\n              loading: true\n            });\n\n          }\n          if(mode === \"v1\"){\n            console.log(\"Tiny Yolo-v1 \")\n            this.model = await yolo.v1tiny();\n            this.setState({\n              loading: true\n            });\n\n          }\n\n          if(mode === \"yolo\"){\n            console.log(\"Yolo-v3 \")\n            this.model = await yolo.v3();\n            this.setState({\n              loading: true\n            });\n\n          }\n\n            \n        console.log('Model loaded')\n        this.setState({\n\n                  model_loaded: true,\n                  loading:false\n                });\n        this.detectFromVideoFrame(this.model, this.videoRef.current);\n       \n\n      }\n\n  \n    // here we are returning the video frame and canvas to draw,\n    // so we are in someway drawing our video \"on the go\"\n    render() {\n      return (\n          <>\n          {/* <div className={vidStyles.container}>\n\n\n                <div style={{backgroundColor:\"#EAE6ED\"}}>\n                <Tabs defaultActiveKey=\"home\" transition={false} id=\"noanim-tab-example\">\n                    <Tab eventKey=\"home\" title=\"Home\">\n                        <p>myyy</p>\n                        <div>\n                        <Button variant=\"dark\"  onClick={()=>{this.load('yolo')}} >YOLOv3 (236MB)</Button>{' '}\n                        <Button variant=\"dark\"  onClick={()=>{this.load('v1')}} >Tiny YOLOv1 (60MB)</Button>{' '}\n                        <Button variant=\"dark\"onClick={()=>{this.load('v2')}} >Tiny YOLOv2 (43MB)</Button>{' '}\n                        <Button variant=\"dark\"onClick={()=>{this.load('v3')}} >Tiny YOLOv3 (34MB)</Button>{' '}\n                    </div>\n                                        <div className={vidStyles.vid}>\n                        <video\n                                style={this.styles}\n                                autoPlay\n                                muted\n                                ref={this.videoRef}\n                                // width=\"720\"\n                                // height=\"500\"\n                            />\n                            <canvas style={this.styles} ref={this.canvasRef} \n                            //   width=\"720\" height=\"500\" \n                />\n                </div>\n                </Tab>\n                <Tab eventKey=\"profile\" title=\"Profile\">\n                    <p>yooo</p>\n                </Tab>\n\n                </Tabs>\n\n             </div>\n\n\n          </div>\n\n           */}\n\n\n{/* <div className={vidStyles.container}>\n    <div className={vidStyles.content}>\n    <div>\n        <Button variant=\"dark\"  onClick={()=>{this.load('yolo')}} >YOLOv3 (236MB)</Button>{' '}\n        <Button variant=\"dark\"  onClick={()=>{this.load('v1')}} >Tiny YOLOv1 (60MB)</Button>{' '}\n        <Button variant=\"dark\"onClick={()=>{this.load('v2')}} >Tiny YOLOv2 (43MB)</Button>{' '}\n        <Button variant=\"dark\"onClick={()=>{this.load('v3')}} >Tiny YOLOv3 (34MB)</Button>{' '}\n    </div>\n    <br/>\n\n    <div className={vidStyles.vid}>\n    <video\n            style={this.styles}\n            autoPlay\n            muted\n            ref={this.videoRef}\n            // width=\"720\"\n            // height=\"500\"\n          />\n          <canvas style={this.styles} ref={this.canvasRef} \n        //   width=\"720\" height=\"500\" \n          />\n    </div>\n  \n\n\n    </div>\n    <br/>\n</div> */}\n          \n\n\n<br/>\n<div>\n    <DropdownButton variant=\"dark\" id=\"dropdown-basic-button\" title=\"Model Type\">\n    <Dropdown.Item onClick={()=>{this.load('yolo')}}>YOLOv3 (236MB)</Dropdown.Item>\n    <Dropdown.Item onClick={()=>{this.load('v1')}}>Tiny YOLOv1 (60MB)</Dropdown.Item>\n    <Dropdown.Item onClick={()=>{this.load('v2')}}>Tiny YOLOv2 (43MB)</Dropdown.Item>\n    <Dropdown.Item onClick={()=>{this.load('v3')}}>Tiny YOLOv3 (34MB)</Dropdown.Item>\n    </DropdownButton>\n\n    \n    </div>\n\n    \n    <br/>\n<div className={\"container\"} >\n    \n    \n          <video\n            style={this.styles}\n            autoPlay\n            muted\n            ref={this.videoRef}\n            width=\"720\"\n            height=\"500\"\n          />\n          <canvas style={this.styles} ref={this.canvasRef} \n          width=\"720\" height=\"500\" \n          />\n          \n          {this.state.loading ? <Loader/>:null}\n            \n          \n\n</div>\n        \n\n          </>\n        \n      );\n    }\n  }\n  \n","import React from 'react';\nimport Yolo from './Yolo'\nimport './App.css';\nimport './styles/style.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Yolo/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}